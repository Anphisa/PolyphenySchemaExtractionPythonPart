#!/usr/bin/env python
import logging
import time

import requests
import asyncio
import websockets
import datetime
import ast
import collections
import pandas as pd
from valentine.algorithms import JaccardLevenMatcherColNamesOnly, Coma
from valentine import valentine_match
from Mapping.Mapping import Mapping
from GenerateSchemaCandidates.SchemaCandidateVisualization import SchemaCandidateVisualization
from Scripts.Sampling.Sample import Sample

from PkFkFinder import PkFkFinder

# TODO: Message queue not as global variable
ws_message_queue = collections.deque(maxlen=100)

async def pk_fk_relationship_finder(data):
    datamodel = data["datamodel"]
    print("datamodel:", datamodel)
    if datamodel != "RELATIONAL":
        logging.error('Datamodel is not relational. Not implemented!')
        raise ValueError('Datamodel is not relational. Not implemented!')
    else:
        pk_fk_finder = PkFkFinder("http://127.0.0.1", "20598", data["tables"], 20)
        sampled_pk_fk_relationships = pk_fk_finder.above_similarity_threshold_pk_comparison()
        validated_pk_fk_relationships = pk_fk_finder.validate_pk_fk_relationships(sampled_pk_fk_relationships)
        print("Validated pk_fk relationships", validated_pk_fk_relationships)

def build_dataframes(message):
    message = ast.literal_eval(message["message"])
    tables_list = message["tables"]
    tables_df = {}
    data_model = message["datamodel"]
    if data_model == 'RELATIONAL':
        for table in tables_list:
            table_name = table["tableName"]
            column_names = table["columnNames"]
            primary_key = table["primaryKey"]
            foreign_keys = table["foreignKeys"]
            namespace_name = table["namespaceName"]
            data_model = message["datamodel"]
            df = pd.DataFrame(columns=column_names)
            if table_name not in tables_df:
                tables_df[table_name] = {}
            tables_df[table_name]["columns"] = df
            tables_df[table_name]["pk"] = primary_key
            tables_df[table_name]["fk"] = foreign_keys
            tables_df[table_name]["datamodel"] = data_model
            tables_df[table_name]["namespacename"] = namespace_name
    elif data_model == 'GRAPH':
        for table in tables_list:
            table_name = table["graphLabel"]
            column_names = table["propertyNames"]
            namespace_name = table["namespaceName"]
            data_model = message["datamodel"]
            df = pd.DataFrame(columns=column_names)
            if table_name not in tables_df:
                tables_df[table_name] = {}
            tables_df[table_name]["columns"] = df
            tables_df[table_name]["datamodel"] = data_model
            tables_df[table_name]["namespacename"] = namespace_name
    elif data_model == 'DOCUMENT':
        for table in tables_list:
            table_name = table["collectionName"]
            column_names = table["firstLevelTags"]
            namespace_name = table["namespaceName"]
            data_model = message["datamodel"]
            df = pd.DataFrame(columns=column_names)
            if table_name not in tables_df:
                tables_df[table_name] = {}
            tables_df[table_name]["columns"] = df
            tables_df[table_name]["datamodel"] = data_model
            tables_df[table_name]["namespacename"] = namespace_name
    else:
        raise RuntimeWarning("Unknown data model: ", data_model)
    return tables_df

def dataframe_valentine_compare(dataframes, valentine_method):
    # given a dict of dataframes (generated by build_dataframes), make a pairwise comparison using valentine
    all_matches = {}
    checked_combinations = []
    for df1 in dataframes:
        for df2 in dataframes:
            if df1 != df2 and (df1, df2) not in checked_combinations and (df2, df1) not in checked_combinations:
                matches = valentine_match(dataframes[df1]["columns"], dataframes[df2]["columns"], valentine_method, df1, df2)
                # add matches to all matches
                all_matches = all_matches | matches
                checked_combinations.append((df1, df2))
    return all_matches

async def show_mapping(num, result, mapping_result):
    schema_candidate_graph = SchemaCandidateVisualization(result + ".svg",
                                                          num,
                                                          result,
                                                          mapping_result[result]["mapping_path"],
                                                          mapping_result[result]["mapping_rows"],
                                                          mapping_result[result]["max_mapping_rows_length"],
                                                          "Field loss: None.",
                                                          "Instance loss: None.",
                                                          "Structure loss: None.")
    g = schema_candidate_graph.draw()
    #print("graphviz dot code:", g.source)
    g.graph_attr.update(size="20,100")
    g.view()
    #print("mapping result", result)

async def consumer(message):
    print("consumer: ", message)
    d_message = ast.literal_eval(message)
    if d_message["topic"] == "namespaceInfo":
        loop = asyncio.get_event_loop()
        dfs = await loop.run_in_executor(None, build_dataframes, d_message)
        #print(dfs)
        #datamodels = [value["datamodel"] for value in dfs.values()]
        #print(datamodels)
        #if not all('RELATIONAL' == model for model in datamodels):
        #    logging.error("Schema integration only works on relational data!")
        #    return
        # {'depts': {'columns': Empty DataFrame
        # Columns: [(deptno,), (name,)]
        # Index: [], 'pk': ['deptno'], 'fk': [], 'datamodel': 'RELATIONAL'}, 'emp': {'columns': Empty DataFrame
        # Columns: [(employeeno,), (age,), (gender,), (maritalstatus,), (worklifebalance,), (education,), (monthlyincome,), (relationshipjoy,), (workingyears,), (yearsatcompany,)]
        # Index: [], 'pk': ['employeeno'], 'fk': [], 'datamodel': 'RELATIONAL'}}
        # sampling
        # Take samples from all columns
        for df in dfs:
            cols = dfs[df]["columns"]
            namespace = dfs[df]["namespacename"]
            namespace_type = dfs[df]["datamodel"]
            for col in cols:
                try:
                    # todo: get from polypheny and fallback 127.0.0.1
                    # todo: get sample size from global config file
                    sample = Sample("http://127.0.0.1", "20598", col, namespace, df, 5)
                    sample.take_sample(namespace_type)
                    sample.extract_sample()
                    dfs[df]["columns"][col] = sample.sample
                except Exception as e:
                    raise RuntimeWarning("Sampling failed for col ", col, "in df ", df, "in namespace, ", namespace)
        # matching
        # todo: set threshold for jl colnames only
        matches = await loop.run_in_executor(None, dataframe_valentine_compare, dfs, JaccardLevenMatcherColNamesOnly())
        #print("matches:", await matches)
        # mapping
        matches_above_thresh = await loop.run_in_executor(None, Mapping.naiveMapping, matches, 0.5)
        #print("matches above thresh:", matches_above_thresh)
        # {(('depts', 'deptno'), ('emps', 'deptno')): 1, (('depts', 'name'), ('emps', 'name')): 1, (('emp', 'employeeno'), ('work', 'employeeno')): 1}
        #mapping_result = await loop.run_in_executor(None, Mapping.naiveMappingDecider, dfs, matches_above_thresh)
        # [{'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'deptno', 'field_name2': 'deptno', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'name', 'field_name2': 'name', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'emp', 'table2': 'work', 'field_name1': 'employeeno', 'field_name2': 'employeeno', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'deptno', 'field_name2': 'deptno', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'name', 'field_name2': 'name', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'emp', 'table2': 'work', 'field_name1': 'employeeno', 'field_name2': 'employeeno', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'deptno', 'field_name2': 'deptno', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'name', 'field_name2': 'name', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'emp', 'table2': 'work', 'field_name1': 'employeeno', 'field_name2': 'employeeno', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'deptno', 'field_name2': 'deptno', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'name', 'field_name2': 'name', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'emp', 'table2': 'work', 'field_name1': 'employeeno', 'field_name2': 'employeeno', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'deptno', 'field_name2': 'deptno', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'name', 'field_name2': 'name', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'emp', 'table2': 'work', 'field_name1': 'employeeno', 'field_name2': 'employeeno', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'deptno', 'field_name2': 'deptno', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'name', 'field_name2': 'name', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'emp', 'table2': 'work', 'field_name1': 'employeeno', 'field_name2': 'employeeno', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'deptno', 'field_name2': 'deptno', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'name', 'field_name2': 'name', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'emp', 'table2': 'work', 'field_name1': 'employeeno', 'field_name2': 'employeeno', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'deptno', 'field_name2': 'deptno', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'name', 'field_name2': 'name', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'emp', 'table2': 'work', 'field_name1': 'employeeno', 'field_name2': 'employeeno', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'deptno', 'field_name2': 'deptno', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'name', 'field_name2': 'name', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'emp', 'table2': 'work', 'field_name1': 'employeeno', 'field_name2': 'employeeno', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'deptno', 'field_name2': 'deptno', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'name', 'field_name2': 'name', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'emp', 'table2': 'work', 'field_name1': 'employeeno', 'field_name2': 'employeeno', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'deptno', 'field_name2': 'deptno', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'name', 'field_name2': 'name', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'emp', 'table2': 'work', 'field_name1': 'employeeno', 'field_name2': 'employeeno', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'deptno', 'field_name2': 'deptno', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'name', 'field_name2': 'name', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'emp', 'table2': 'work', 'field_name1': 'employeeno', 'field_name2': 'employeeno', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'deptno', 'field_name2': 'deptno', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'name', 'field_name2': 'name', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'emp', 'table2': 'work', 'field_name1': 'employeeno', 'field_name2': 'employeeno', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'deptno', 'field_name2': 'deptno', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'name', 'field_name2': 'name', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'emp', 'table2': 'work', 'field_name1': 'employeeno', 'field_name2': 'employeeno', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'deptno', 'field_name2': 'deptno', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'name', 'field_name2': 'name', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'emp', 'table2': 'work', 'field_name1': 'employeeno', 'field_name2': 'employeeno', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'deptno', 'field_name2': 'deptno', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'name', 'field_name2': 'name', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'emp', 'table2': 'work', 'field_name1': 'employeeno', 'field_name2': 'employeeno', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'deptno', 'field_name2': 'deptno', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'name', 'field_name2': 'name', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'emp', 'table2': 'work', 'field_name1': 'employeeno', 'field_name2': 'employeeno', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'deptno', 'field_name2': 'deptno', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'name', 'field_name2': 'name', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'emp', 'table2': 'work', 'field_name1': 'employeeno', 'field_name2': 'employeeno', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'deptno', 'field_name2': 'deptno', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'name', 'field_name2': 'name', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'emp', 'table2': 'work', 'field_name1': 'employeeno', 'field_name2': 'employeeno', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'deptno', 'field_name2': 'deptno', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'name', 'field_name2': 'name', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'emp', 'table2': 'work', 'field_name1': 'employeeno', 'field_name2': 'employeeno', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'deptno', 'field_name2': 'deptno', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'name', 'field_name2': 'name', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'emp', 'table2': 'work', 'field_name1': 'employeeno', 'field_name2': 'employeeno', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'deptno', 'field_name2': 'deptno', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'name', 'field_name2': 'name', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'emp', 'table2': 'work', 'field_name1': 'employeeno', 'field_name2': 'employeeno', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'deptno', 'field_name2': 'deptno', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'name', 'field_name2': 'name', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'emp', 'table2': 'work', 'field_name1': 'employeeno', 'field_name2': 'employeeno', 'relationship_type': 'view union', 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'deptno', 'field_name2': 'deptno', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'depts', 'table2': 'emps', 'field_name1': 'name', 'field_name2': 'name', 'relationship_type': ('join',), 'relationship_strength': 1}, {'object': 'FieldRelationship', 'table1': 'emp', 'table2': 'work', 'field_name1': 'employeeno', 'field_name2': 'employeeno', 'relationship_type': ('join',), 'relationship_strength': 1}]
        mapper = Mapping(dfs)
        mapping_result = mapper.pyDynaMapMapping(matches_above_thresh)
        schema_candidate_num = 0
        for result in mapping_result:
            await show_mapping(schema_candidate_num, result, mapping_result)
            schema_candidate_num += 1
        URL = "http://127.0.0.1:20598/result"
        PARAMS = {'results': str(mapping_result)}
        print("sending PARAMS", PARAMS)
        r = requests.post(url=URL, data=PARAMS)
        print("response", r.status_code)
        #ws_message_queue.appendleft(str(await matches))
        #await pk_fk_relationship_finder(ast.literal_eval(d_message["message"]))
    if d_message["topic"] == "speedThoroughness":
        speedThoroughness = int(d_message["message"])
        print("set speed/thoroughness to ", speedThoroughness)
        # TODO: Use this parameter to set Valentine methods or sth like that. Make & use global config

async def consumer_handler(websocket):
    while True:
        async for message in websocket:
            await consumer(message)    #global glob_message

async def producer_handler(websocket):
    while True:
        if len(ws_message_queue) > 0:
            message = ws_message_queue.pop()
            print("producer: ", message)
            await websocket.send(message)
        await asyncio.sleep(2.0)

async def status_producer():
    now = datetime.datetime.utcnow().isoformat() + 'Z'
    return (now)

async def status_producer_handler(websocket):
    while True:
        message = await status_producer()
        print("status_producer: ", message)
        await websocket.send(message)
        await asyncio.sleep(5.0)

async def handler(websocket):
    consumer_task = asyncio.create_task(consumer_handler(websocket))
    producer_task = asyncio.create_task(producer_handler(websocket))
    status_producer_task = asyncio.create_task(status_producer_handler(websocket))
    done, pending = await asyncio.wait(
        [consumer_task, producer_task, status_producer_task],
        return_when=asyncio.FIRST_COMPLETED,
    )
    for task in pending:
        task.cancel()

async def main():
    # Connect to Polypheny: websocket connection
    # Here we get user input (i.e. call to run Python script)
    try:
        async with websockets.connect("ws://localhost:20598/register") as websocket:
            await handler(websocket)
            await asyncio.Future()  # run forever
    except ConnectionRefusedError as e:
        logging.error("Polypheny websocket server not running or responding")
        print("Polypheny websocket server not running or responding", e)

    # TODO: Define a pipeline of steps to be performed (later to be optimized/determined dynamically due to user inputs, etc.)

if __name__ == "__main__":
    logging.getLogger("asyncio").setLevel(logging.INFO)
    logging.Formatter('%(asctime)s %(message)s', datefmt='%m/%d/%Y %I:%M:%S %p')
    # TODO: Set logging file name (https://stackoverflow.com/questions/13839554/how-to-change-filehandle-with-python-logging-on-the-fly-with-different-classes-a)
    logging.info('Started schema integration Python part (main.py)')

    asyncio.run(main())

    logging.info('Closing Polypheny connection. Exiting schema integration Python part.')